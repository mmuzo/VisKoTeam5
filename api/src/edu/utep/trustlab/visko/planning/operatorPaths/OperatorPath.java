/*
Copyright (c) 2012, University of Texas at El Paso
All rights reserved.
Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

	-Redistributions of source code must retain the above copyright notice, this list of conditions
	 and the following disclaimer.
	-Redistributions in binary form must reproduce the above copyright notice, this list of conditions
	 and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/


/*
Copyright (c) 2012, University of Texas at El Paso
All rights reserved.
Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

	-Redistributions of source code must retain the above copyright notice, this list of conditions
	 and the following disclaimer.
	-Redistributions in binary form must reproduce the above copyright notice, this list of conditions
	 and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/


package edu.utep.trustlab.visko.planning.operatorPaths;

import java.util.*;

import edu.utep.trustlab.visko.util.ResultSetToVector;
import edu.utep.trustlab.visko.sparql.ViskoTripleStore;

public class OperatorPath extends Vector<String> {
	//the viewer that consumes the visualization generated by this pipeline
	private String viewerURI;
	
	//the visualization this operator pipeline generates
	private String visualizationAbstractionURI;
	
	//the triple store instance this operator relies on
	private ViskoTripleStore ts;
	
	//hashmap to quickly check for operator membership
	private HashMap<String, Boolean> operatorLookup;
	
	private boolean containsFilter;
	private boolean containsDimensionReducer;
	private boolean containsMapper;
	private boolean containsInterpolator;
	
	private boolean violatesRuleSingleFilter;
	private boolean violatesRuleSingleDimensionReducer;
	private boolean violatesRuleSingleMapper;
	private boolean violatesRuleSingleInterpolator;

	/*
	public OperatorPath(String aViewerURI) {
		super();
		viewerURI = aViewerURI;
		operatorLookup = new HashMap<String, Boolean>();
	}*/
	
	public OperatorPath(ViskoTripleStore tripleStore) {
		super();
		ts = tripleStore;
		operatorLookup = new HashMap<String, Boolean>();
	}
	
	public void set(Vector<String> operatorURIs) {
		for (String operatorURI : operatorURIs)
			add(operatorURI);
	}
	
	public boolean containsMapper(){
		return containsMapper;
	}

	public boolean containsFilter(){
		return containsFilter;
	}

	public boolean containsDimensionReducer(){
		return containsDimensionReducer;
	}
	
	public boolean containsInterpolator(){
		return containsInterpolator;
	}

	private boolean isAlreadyInPath(String operatorURI){
		Boolean value = operatorLookup.get(operatorURI);
		if(value != null && value.booleanValue())
			return true;
		return false;
	}
	
	public boolean generatesVisualizationAbstraction(String aVisualizationAbstractionURI){
		if(visualizationAbstractionURI != null && aVisualizationAbstractionURI != null){
			 boolean matches = visualizationAbstractionURI.equals(aVisualizationAbstractionURI);
			 System.out.println("matches vis abstraction: " + matches);
			 return matches;
		}
		else
			return false;
	}
	
	public Vector<String> outputCanBeViewedByViewerSet(Vector<String> viewerURIs){
		String finalOperatorURI = this.lastElement();
		Vector<String> viewers = new Vector<String>();
		for(String aViewerURI : viewerURIs){
			if(ts.outputCanBeViewedByViewer(finalOperatorURI, aViewerURI)){
				viewers.add(aViewerURI);
			}
		}
		return viewers;
	}
	
	public boolean outputMatchesTargetData(String targetFormatURI, String targetTypeURI){
		String finalOperatorURI = this.lastElement();
		return ts.outputMatchesTargetData(finalOperatorURI, targetFormatURI, targetTypeURI);
	}

		
	public void setViewer(String aViewerURI){
		viewerURI = aViewerURI;
		
		Vector<String> visualizationAbstractions = ResultSetToVector.getVectorFromResultSet(ts.getVisualizationAbstractionGeneratedByViewer(viewerURI), "visualizationAbstraction");
		if(visualizationAbstractions.size() > 0)
			visualizationAbstractionURI = visualizationAbstractions.firstElement();
	}
	
	public OperatorPath clonePath(){
		
		OperatorPath clonedPath = new OperatorPath(ts);

		for(String operatorURI : this)
			clonedPath.add(operatorURI);		
		
		clonedPath.setVisualizationAbstractionURI(visualizationAbstractionURI);
		clonedPath.setViewer(viewerURI);
		
		return clonedPath;
	}
	
	public Vector<String> filterOperatorsAlreadyInPath(Vector<String> operatorURIs){
		Vector<String> eligibleOperatorURIs = new Vector<String>();
		
		for(String potentialEligibleOperatorURI : operatorURIs)
			if(!isAlreadyInPath(potentialEligibleOperatorURI))
				eligibleOperatorURIs.add(potentialEligibleOperatorURI);		
		return eligibleOperatorURIs;
	}
	
	public boolean add(String operatorURI){
		 if(ts.isMapper(operatorURI)){
			 violatesRuleSingleMapper = containsMapper;
			 containsMapper = true;
			 setVisualizationAbstractionGeneratedByViewMapper(operatorURI);
		 }
		 else if(ts.isFilter(operatorURI)){
			 violatesRuleSingleFilter = containsFilter;
			 containsFilter = true;
		 }
		 else if(ts.isDimensionReducer(operatorURI)){
			violatesRuleSingleDimensionReducer = containsDimensionReducer;		
		 	containsDimensionReducer = true;
		 }
		 else if(ts.isInterpolator(operatorURI)){
			 violatesRuleSingleInterpolator = containsInterpolator;
			 containsInterpolator = true;
		 }
		 
		 operatorLookup.put(operatorURI, new Boolean(true));
		 return super.add(operatorURI);
	}
	
	public boolean violatesRules(){
		return violatesRuleSingleFilter
				|| violatesRuleSingleDimensionReducer
				|| violatesRuleSingleInterpolator
				|| violatesRuleSingleMapper;
	}
	
	private void setVisualizationAbstractionGeneratedByViewMapper(String viewMapperURI){
		Vector<String> view = ResultSetToVector.getVectorFromResultSet(ts.getViewGeneratedByViewMapper(viewMapperURI), "view");
		visualizationAbstractionURI = view.firstElement(); 
	}
	
	public boolean violatesRequestedView(String requestedVisualizationAbstractionURI){
		if(visualizationAbstractionURI != null && requestedVisualizationAbstractionURI != null && !requestedVisualizationAbstractionURI.equals(visualizationAbstractionURI))
			return true;
		return false;
	}
		
	public String getVisualizationAbstractionGenerated(){
		return visualizationAbstractionURI;
	}
	
	private void setVisualizationAbstractionURI(String aVisualizationAbstractionURI){
		visualizationAbstractionURI = aVisualizationAbstractionURI;
	}
	
	public String getViewerURI() {
		return viewerURI;
	}
	
	public String toString(){
		String stringRepresentation = 
				"Operator path:\n"
				+ super.toString() + "\n"
				+ "Viewer: " + this.viewerURI;
		return stringRepresentation;
	}
}